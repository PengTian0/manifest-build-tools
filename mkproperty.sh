#!/bin/bash
#
# Copyright 2016, EMC, Inc.
#
# mkproperty.sh
# For supporting update multi repos in one update_manifest build.
#
# Generate all of the repos' infomation cloned in current workspace(except manifest-build-tools itself)
# write them into a property file which used to trigger downstream job update_manifest.
# 
#
set -e

#which repo this script stored in
TOOL_REPO_URL=`pushd $(dirname "$0") >/dev/null && git remote show origin -n | grep "Fetch URL:" | sed 's#.*\(https*://[^"]*\).*#\1#' && popd >/dev/null`

#The information of all repos' in SCM will be generated by jenkins git plugin
#Plugin exported env vars are named GIT_URL GIT_URL_1 ......
#Vars without number are processed individually.
if [ "$GIT_URL" == "$TOOL_REPO_URL" ]; then
    GIT_URL=""
    GIT_BRANCH=""
    GIT_COMMIT=""
fi

#Generate repo information list
#Vars with number are processed in loop
for (( i = 1; ; i++ ))
do
  TMP_URL_NAME=GIT_URL_$i
  TMP_BRANCH_NAME=GIT_BRANCH_$i
  TMP_COMMIT_NAME=GIT_COMMIT_$i

  #all vars have been processed.
  if [ -z "${!TMP_URL_NAME}" ]; then
    echo "Found empty value with $i"
    break
  fi
  if [ "${!TMP_URL_NAME}" != "$TOOL_REPO_URL" ]; then
    GIT_URL="$GIT_URL ${!TMP_URL_NAME}"
    GIT_BRANCH="$GIT_BRANCH ${!TMP_BRANCH_NAME}"
    GIT_COMMIT="$GIT_COMMIT ${!TMP_COMMIT_NAME}"
  fi
done

#write properties file
if [ -f ${WORKSPACE}/properties ]; then
  rm ${WORKSPACE}/properties
fi
echo "url=$GIT_URL
branch=$GIT_BRANCH
id=$GIT_COMMIT" >> ${WORKSPACE}/properties
